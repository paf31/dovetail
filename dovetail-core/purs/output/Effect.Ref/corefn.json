{"moduleName":["Effect","Ref"],"reExports":{},"imports":[{"annotation":{"meta":null,"sourceSpan":{"start":[22,1],"end":[70,60]}},"moduleName":["Data","Function"]},{"annotation":{"meta":null,"sourceSpan":{"start":[22,1],"end":[70,60]}},"moduleName":["Data","Functor"]},{"annotation":{"meta":null,"sourceSpan":{"start":[22,1],"end":[70,60]}},"moduleName":["Effect"]},{"annotation":{"meta":null,"sourceSpan":{"start":[22,1],"end":[70,60]}},"moduleName":["Effect","Ref"]},{"annotation":{"meta":null,"sourceSpan":{"start":[33,1],"end":[33,15]}},"moduleName":["Prelude"]},{"annotation":{"meta":null,"sourceSpan":{"start":[22,1],"end":[70,60]}},"moduleName":["Prim"]}],"builtWith":"0.14.4","modulePath":".spago/refs/v5.0.0/src/Effect/Ref.purs","exports":["new","newWithSelf","read","modify'","modify","modify_","write"],"decls":[{"annotation":{"meta":null,"sourceSpan":{"start":[55,1],"end":[55,78]}},"identifier":"modify'","expression":{"annotation":{"meta":{"metaType":"IsForeign"},"sourceSpan":{"start":[56,11],"end":[56,21]}},"value":{"moduleName":["Effect","Ref"],"identifier":"modifyImpl"},"type":"Var"},"bindType":"NonRec"},{"annotation":{"meta":null,"sourceSpan":{"start":[62,1],"end":[62,50]}},"identifier":"modify","expression":{"annotation":{"meta":null,"sourceSpan":{"start":[62,1],"end":[62,50]}},"body":{"annotation":{"meta":null,"sourceSpan":{"start":[63,12],"end":[63,66]}},"argument":{"annotation":{"meta":null,"sourceSpan":{"start":[63,20],"end":[63,66]}},"body":{"annotation":{"meta":null,"sourceSpan":{"start":[63,26],"end":[63,66]}},"binds":[{"annotation":{"meta":null,"sourceSpan":{"start":[63,30],"end":[63,38]}},"identifier":"s'","expression":{"annotation":{"meta":null,"sourceSpan":{"start":[63,35],"end":[63,38]}},"argument":{"annotation":{"meta":null,"sourceSpan":{"start":[63,37],"end":[63,38]}},"value":{"moduleName":null,"identifier":"s"},"type":"Var"},"type":"App","abstraction":{"annotation":{"meta":null,"sourceSpan":{"start":[63,35],"end":[63,36]}},"value":{"moduleName":null,"identifier":"f"},"type":"Var"}},"bindType":"NonRec"}],"expression":{"annotation":{"meta":null,"sourceSpan":{"start":[63,42],"end":[63,66]}},"value":{"literalType":"ObjectLiteral","value":[["state",{"annotation":{"meta":null,"sourceSpan":{"start":[63,51],"end":[63,53]}},"value":{"moduleName":null,"identifier":"s'"},"type":"Var"}],["value",{"annotation":{"meta":null,"sourceSpan":{"start":[63,62],"end":[63,64]}},"value":{"moduleName":null,"identifier":"s'"},"type":"Var"}]]},"type":"Literal"},"type":"Let"},"argument":"s","type":"Abs"},"type":"App","abstraction":{"annotation":{"meta":null,"sourceSpan":{"start":[63,12],"end":[63,19]}},"value":{"moduleName":["Effect","Ref"],"identifier":"modify'"},"type":"Var"}},"argument":"f","type":"Abs"},"bindType":"NonRec"},{"annotation":{"meta":null,"sourceSpan":{"start":[66,1],"end":[66,54]}},"identifier":"modify_","expression":{"annotation":{"meta":null,"sourceSpan":{"start":[66,1],"end":[66,54]}},"body":{"annotation":{"meta":null,"sourceSpan":{"start":[66,1],"end":[66,54]}},"body":{"annotation":{"meta":null,"sourceSpan":{"start":[67,15],"end":[67,32]}},"argument":{"annotation":{"meta":null,"sourceSpan":{"start":[67,22],"end":[67,32]}},"argument":{"annotation":{"meta":null,"sourceSpan":{"start":[67,31],"end":[67,32]}},"value":{"moduleName":null,"identifier":"s"},"type":"Var"},"type":"App","abstraction":{"annotation":{"meta":null,"sourceSpan":{"start":[67,22],"end":[67,30]}},"argument":{"annotation":{"meta":null,"sourceSpan":{"start":[67,29],"end":[67,30]}},"value":{"moduleName":null,"identifier":"f"},"type":"Var"},"type":"App","abstraction":{"annotation":{"meta":null,"sourceSpan":{"start":[67,22],"end":[67,28]}},"value":{"moduleName":["Effect","Ref"],"identifier":"modify"},"type":"Var"}}},"type":"App","abstraction":{"annotation":{"meta":null,"sourceSpan":{"start":[67,15],"end":[67,32]}},"argument":{"annotation":{"meta":null,"sourceSpan":{"start":[67,15],"end":[67,19]}},"argument":{"annotation":{"meta":null,"sourceSpan":{"start":[0,0],"end":[0,0]}},"value":{"moduleName":["Effect"],"identifier":"functorEffect"},"type":"Var"},"type":"App","abstraction":{"annotation":{"meta":{"metaType":"IsForeign"},"sourceSpan":{"start":[67,15],"end":[67,19]}},"value":{"moduleName":["Data","Functor"],"identifier":"void"},"type":"Var"}},"type":"App","abstraction":{"annotation":{"meta":{"metaType":"IsForeign"},"sourceSpan":{"start":[67,20],"end":[67,21]}},"value":{"moduleName":["Data","Function"],"identifier":"apply"},"type":"Var"}}},"argument":"s","type":"Abs"},"argument":"f","type":"Abs"},"bindType":"NonRec"}],"comments":[{"LineComment":" | This module defines the `Ref` type for mutable value references, as well"},{"LineComment":" | as actions for working with them."},{"LineComment":" |"},{"LineComment":" | You'll notice that all of the functions that operate on a `Ref` (e.g."},{"LineComment":" | `new`, `read`, `write`) return their result wrapped in an `Effect`."},{"LineComment":" | Working with mutable references is considered effectful in PureScript"},{"LineComment":" | because of the principle of purity: functions should not have side"},{"LineComment":" | effects, and should return the same result when called with the same"},{"LineComment":" | arguments. If a `Ref` could be written to without using `Effect`, that"},{"LineComment":" | would cause a side effect (the effect of changing the result of subsequent"},{"LineComment":" | reads for that `Ref`). If there were a function for reading the current"},{"LineComment":" | value of a `Ref` without the result being wrapped in `Effect`, the result"},{"LineComment":" | of calling that function would change each time a new value was written to"},{"LineComment":" | the `Ref`. Even creating a new `Ref` is effectful: if there were a"},{"LineComment":" | function for creating a new `Ref` with the type `forall s. s -> Ref s`,"},{"LineComment":" | then calling that function twice with the same argument would not give the"},{"LineComment":" | same result in each case, since you'd end up with two distinct references"},{"LineComment":" | which could be updated independently of each other."},{"LineComment":" |"},{"LineComment":" | _Note_: `Control.Monad.ST` provides a pure alternative to `Ref` when"},{"LineComment":" | mutation is restricted to a local scope."}],"foreign":["new","newWithSelf","read","modifyImpl","write"],"sourceSpan":{"start":[22,1],"end":[70,60]}}