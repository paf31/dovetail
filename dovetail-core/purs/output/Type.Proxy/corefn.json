{"moduleName":["Type","Proxy"],"reExports":{},"imports":[{"annotation":{"meta":null,"sourceSpan":{"start":[49,1],"end":[62,49]}},"moduleName":["Prim"]}],"builtWith":"0.14.4","modulePath":".spago/prelude/v5.0.1/src/Type/Proxy.purs","exports":["Proxy","Proxy2","Proxy3"],"decls":[{"annotation":{"meta":null,"sourceSpan":{"start":[62,1],"end":[62,49]}},"identifier":"Proxy3","expression":{"constructorName":"Proxy3","annotation":{"meta":null,"sourceSpan":{"start":[62,1],"end":[62,49]}},"typeName":"Proxy3","fieldNames":[],"type":"Constructor"},"bindType":"NonRec"},{"annotation":{"meta":null,"sourceSpan":{"start":[58,1],"end":[58,23]}},"identifier":"Proxy2","expression":{"constructorName":"Proxy2","annotation":{"meta":null,"sourceSpan":{"start":[58,1],"end":[58,23]}},"typeName":"Proxy2","fieldNames":[],"type":"Constructor"},"bindType":"NonRec"},{"annotation":{"meta":null,"sourceSpan":{"start":[53,1],"end":[53,21]}},"identifier":"Proxy","expression":{"constructorName":"Proxy","annotation":{"meta":null,"sourceSpan":{"start":[53,1],"end":[53,21]}},"typeName":"Proxy","fieldNames":[],"type":"Constructor"},"bindType":"NonRec"}],"comments":[{"LineComment":" | The `Proxy` type and values are for situations where type information is"},{"LineComment":" | required for an input to determine the type of an output, but where it is"},{"LineComment":" | not possible or convenient to provide a _value_ for the input."},{"LineComment":" |"},{"LineComment":" | A hypothetical example: if you have a class that is used to handle the"},{"LineComment":" | result of an AJAX request, you may want to use this information to set the"},{"LineComment":" | expected content type of the request, so you might have a class something"},{"LineComment":" | like this:"},{"LineComment":" |"},{"LineComment":" | ``` purescript"},{"LineComment":" | class AjaxResponse a where"},{"LineComment":" |   responseType :: a -> ResponseType"},{"LineComment":" |   fromResponse :: Foreign -> a"},{"LineComment":" | ```"},{"LineComment":" |"},{"LineComment":" | The problem here is `responseType` requires a value of type `a`, but we"},{"LineComment":" | won't have a value of that type until the request has been completed. The"},{"LineComment":" | solution is to use a `Proxy` type instead:"},{"LineComment":" |"},{"LineComment":" | ``` purescript"},{"LineComment":" | class AjaxResponse a where"},{"LineComment":" |   responseType :: Proxy a -> ResponseType"},{"LineComment":" |   fromResponse :: Foreign -> a"},{"LineComment":" | ```"},{"LineComment":" |"},{"LineComment":" | We can now call `responseType (Proxy :: Proxy SomeContentType)` to produce"},{"LineComment":" | a `ResponseType` for `SomeContentType` without having to construct some"},{"LineComment":" | empty version of `SomeContentType` first. In situations like this where"},{"LineComment":" | the `Proxy` type can be statically determined, it is recommended to pull"},{"LineComment":" | out the definition to the top level and make a declaration like:"},{"LineComment":" |"},{"LineComment":" | ``` purescript"},{"LineComment":" | _SomeContentType :: Proxy SomeContentType"},{"LineComment":" | _SomeContentType = Proxy"},{"LineComment":" | ```"},{"LineComment":" |"},{"LineComment":" | That way the proxy value can be used as `responseType _SomeContentType`"},{"LineComment":" | for improved readability. However, this is not always possible, sometimes"},{"LineComment":" | the type required will be determined by a type variable. As PureScript has"},{"LineComment":" | scoped type variables, we can do things like this:"},{"LineComment":" |"},{"LineComment":" | ``` purescript"},{"LineComment":" | makeRequest :: URL -> ResponseType -> Aff _ Foreign"},{"LineComment":" | makeRequest = ..."},{"LineComment":" |"},{"LineComment":" | fetchData :: forall a. (AjaxResponse a) => URL -> Aff _ a"},{"LineComment":" | fetchData url = fromResponse <$> makeRequest url (responseType (Proxy :: Proxy a))"},{"LineComment":" | ```"}],"foreign":[],"sourceSpan":{"start":[49,1],"end":[62,49]}}