-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Dovetail support for the PureScript core library set
--   
--   Dovetail support for the PureScript core library set
@package dovetail-core
@version 0.1.0.0

module Dovetail.Core.Control.Apply
env :: forall ctx. Env ctx

module Dovetail.Core.Control.Bind
env :: forall ctx. Env ctx

module Dovetail.Core.Control.Extend
env :: forall ctx. Env ctx

module Dovetail.Core.Data.Array
env :: forall ctx. Env ctx

module Dovetail.Core.Data.Array.NonEmpty.Internal
env :: forall ctx. Env ctx

module Dovetail.Core.Data.Bounded
env :: forall ctx. Env ctx

module Dovetail.Core.Data.Enum
env :: forall ctx. Env ctx

module Dovetail.Core.Data.Eq
env :: forall ctx. Env ctx

module Dovetail.Core.Data.EuclideanRing
env :: forall ctx. Env ctx

module Dovetail.Core.Data.Foldable
env :: forall ctx. Env ctx

module Dovetail.Core.Data.Function.Uncurried
type family Fn (n :: Nat) (ctx :: *)
env :: forall ctx. Env ctx

module Dovetail.Core.Data.Functor
env :: forall ctx. Env ctx

module Dovetail.Core.Data.FunctorWithIndex
env :: forall ctx. Env ctx

module Dovetail.Core.Data.HeytingAlgebra
env :: forall ctx. Env ctx

module Dovetail.Core.Data.Int
env :: forall ctx. Env ctx

module Dovetail.Core.Data.Int.Bits
env :: forall ctx. Env ctx

module Dovetail.Core.Data.Lazy
type Lazy ctx a = ForeignType (Eval ctx a)
env :: forall ctx. Typeable ctx => Env ctx

module Dovetail.Core.Data.Number
env :: forall ctx. Env ctx

module Dovetail.Core.Data.Number.Format
env :: forall ctx. Env ctx

module Dovetail.Core.Data.Ord
env :: forall ctx. Env ctx

module Dovetail.Core.Data.Ring
env :: forall ctx. Env ctx

module Dovetail.Core.Data.Semigroup
env :: forall ctx. Env ctx

module Dovetail.Core.Data.Semiring
env :: forall ctx. Env ctx

module Dovetail.Core.Data.Show
env :: forall ctx. Env ctx

module Dovetail.Core.Data.Show.Generic
env :: forall ctx. Env ctx

module Dovetail.Core.Data.String.CodePoints
type CodePoint = Integer
env :: forall ctx. Env ctx

module Dovetail.Core.Data.String.CodeUnits
env :: forall ctx. Env ctx

module Dovetail.Core.Data.String.Common
env :: forall ctx. Env ctx

module Dovetail.Core.Data.String.Regex
env :: forall ctx. Env ctx

module Dovetail.Core.Data.String.Unsafe
env :: forall ctx. Env ctx

module Dovetail.Core.Data.Symbol
env :: forall ctx. Env ctx

module Dovetail.Core.Data.Traversable
env :: forall ctx. Env ctx

module Dovetail.Core.Data.Unfoldable
unfoldrArrayImpl :: (Value ctx -> Eval ctx Bool) -> (Value ctx -> Eval ctx (Value ctx)) -> (Value ctx -> Eval ctx (Value ctx)) -> (Value ctx -> Eval ctx (Value ctx)) -> (Value ctx -> Eval ctx (Value ctx)) -> Value ctx -> Eval ctx (Vector (Value ctx))
env :: forall ctx. Env ctx

module Dovetail.Core.Data.Unfoldable1
unfoldr1ArrayImpl :: (Value ctx -> Eval ctx Bool) -> (Value ctx -> Eval ctx (Value ctx)) -> (Value ctx -> Eval ctx (Value ctx)) -> (Value ctx -> Eval ctx (Value ctx)) -> (Value ctx -> Eval ctx (Value ctx)) -> Value ctx -> Eval ctx (Vector (Value ctx))
env :: forall ctx. Env ctx

module Dovetail.Core.Data.Unit
env :: forall ctx. Env ctx

module Dovetail.Core.Effect
type Effect ctx a = Value ctx -> Eval ctx a
env :: forall ctx. Env ctx

module Dovetail.Core.Effect.Console
env :: forall ctx. Typeable ctx => Env ctx

module Dovetail.Core.Effect.Exception
type Error ctx = ForeignType (EvaluationError ctx)
renderValueOptions :: RenderValueOptions
env :: forall ctx. Typeable ctx => Env ctx

module Dovetail.Core.Effect.Random
env :: forall ctx. Env ctx

module Dovetail.Core.Effect.Ref
type Ref ctx = ForeignType (IORef (Value ctx))
data ModifyResult ctx
ModifyResult :: Value ctx -> Value ctx -> ModifyResult ctx
[state] :: ModifyResult ctx -> Value ctx
[value] :: ModifyResult ctx -> Value ctx
env :: forall ctx. Typeable ctx => Env ctx
instance GHC.Generics.Generic (Dovetail.Core.Effect.Ref.ModifyResult ctx)
instance Dovetail.Evaluate.ToValue ctx (Dovetail.Core.Effect.Ref.ModifyResult ctx)

module Dovetail.Core.Control.Monad.ST.Internal
type ST ctx a = Value ctx -> Eval ctx a
env :: forall ctx. Typeable ctx => Env ctx

module Dovetail.Core.Data.Array.ST
type STArray a = ForeignType (IOVector a)
env :: forall ctx. Typeable ctx => Env ctx

module Dovetail.Core.Data.Array.ST.Partial
env :: forall ctx. Typeable ctx => Env ctx

module Dovetail.Core.Effect.Uncurried
type family Fn (n :: Nat) (ctx :: *)
env :: forall ctx. Env ctx

module Dovetail.Core.Effect.Unsafe
env :: forall ctx. Env ctx

module Dovetail.Core.Math
env :: forall ctx. Env ctx

module Dovetail.Core.Partial
env :: forall ctx. Env ctx

module Dovetail.Core.Partial.Unsafe
env :: forall ctx. Env ctx

module Dovetail.Core.Record.Builder
env :: forall ctx. Env ctx

module Dovetail.Core.Record.Unsafe
env :: forall ctx. Env ctx

module Dovetail.Core.Record.Unsafe.Union
env :: forall ctx. Env ctx

module Dovetail.Core.Test.Assert
env :: forall ctx. Env ctx

module Dovetail.Core.Unsafe.Coerce
env :: forall ctx. Env ctx

module Dovetail.Core
pursFiles :: [(FilePath, ByteString)]
core :: forall ctx. Typeable ctx => Interpret ctx ()
env :: forall ctx. Typeable ctx => Env ctx
